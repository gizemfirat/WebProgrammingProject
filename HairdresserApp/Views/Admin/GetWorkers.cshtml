@model IEnumerable<Entities.ViewModels.WorkerViewModel>

<div class="section-admin-panel u-margin-bottom-2">
  <button id="openModalButton" class="btn btn-primary">Add Worker</button>
</div>
<table class="table">
  <thead>
    <tr>
      <th>Employee Name</th>
      <th>Employee Surname</th>
      <th>Processes</th>
      <th>Salary</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    @foreach (var worker in Model)
    {
      <tr>
        <td>@worker.Name</td>
        <td>@worker.Surname</td>
        <td>
          @foreach (var process in worker.Processes)
          {
            <p class="paragraph">- @process.Name</p>
          }
        </td>
        <td>@worker.Salary â‚º</td>
        <td>
          <button class="btn btn-primary edit-button" data-id="@worker.Id" data-name="@worker.Name"
            data-surname="@worker.Surname" data-salary="@worker.Salary"
            data-processes='@Html.Raw(Json.Serialize(worker.Processes))'>Edit</button>
          <button class="btn btn-outlined delete-button" data-id="@worker.Id">Delete</button>
        </td>
      </tr>
    }
  </tbody>
</table>

<div id="createWorkerModal" class="modal" data-id="">
  <div class="modal-content">
    <div class="modal-header">
      <h5 class="heading-fifth">Add a new Employee</h5>
      <span class="close-button" id="closeModalButton">&times;</span>
    </div>
    <form id="createWorkerForm">
      <div class="modal-body">
        <div class="form-group">
          <input type="hidden" id="Id" name="Id" />
        </div>
        <div class="form-group">
          <label for="Name" class="form-label">Name</label>
          <input type="text" id="Name" name="Name" class="form-input" required />
        </div>
        <div class="form-group">
          <label for="Surname" class="form-label">Surname</label>
          <input type="text" id="Surname" name="Surname" class="form-input" required />
        </div>
        <div class="form-group">
          <label for="Salary" class="form-label">Salary</label>
          <input type="text" id="Salary" name="Salary" class="form-input" required />
        </div>
        <div class="form-group">
          <label for="processes" class="form-label">Processes</label>
          <div class="multi-select form-input" id="processesContainer">
            <div class="select-box" id="selectBox">
              <span id="selectedItems">Select processes...</span>
            </div>
            <div class="dropdown" id="processesDropdown">
            </div>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="submit" class="btn btn-primary">Add</button>
      </div>
    </form>
  </div>
</div>

<script>
  const modal = document.getElementById('createWorkerModal');
  const openModalButton = document.getElementById('openModalButton');
  const closeModalButton = document.getElementById('closeModalButton');
  const selectBox = document.getElementById('selectBox');
  const processesDropdown = document.getElementById('processesDropdown');
  const selectedItems = document.getElementById('selectedItems');

  selectBox.addEventListener('click', () => {
    processesDropdown.classList.toggle('open');
  });

  document.addEventListener('DOMContentLoaded', () => {
    fetch('/Process/GetProcesses')
      .then(response => response.json())
      .then(data => {
        processesDropdown.innerHTML = '';
        data.forEach(process => {
          const label = document.createElement('label');
          label.innerHTML = `<input type="checkbox" value="${process.id}" /> ${process.name}`;
          processesDropdown.appendChild(label);
        });
      });
  });

  processesDropdown.addEventListener('change', () => {
    const selected = Array.from(processesDropdown.querySelectorAll('input[type="checkbox"]:checked'))
      .map(checkbox => checkbox.nextSibling.textContent.trim());
    selectedItems.textContent = selected.length > 0 ? selected.join(', ') : 'Select processes...';
  });


  openModalButton.addEventListener('click', () => {
    modal.style.display = 'block';
  });

  closeModalButton.addEventListener('click', () => {
    modal.style.display = 'none';
  });

  window.addEventListener('click', (event) => {
    if (event.target === modal) {
      modal.style.display = 'none';
    }
  });

  const editButtons = document.querySelectorAll('.edit-button');
  const submitButton = document.querySelector('#createWorkerForm button[type="submit"]');

  editButtons.forEach(button => {
    button.addEventListener('click', () => {
      const id = button.getAttribute('data-id');
      console.log(id);
      const name = button.getAttribute('data-name');
      const surname = button.getAttribute('data-surname');
      const salary = button.getAttribute('data-salary');
      const processes = JSON.parse(button.getAttribute('data-processes'));

      document.getElementById('Name').value = name;
      document.getElementById('Surname').value = surname;
      document.getElementById('Salary').value = salary;
      document.getElementById('Id').value = id;

      console.log(processes);

      const checkboxes = processesDropdown.querySelectorAll('input[type="checkbox"]');
      checkboxes.forEach(checkbox => {
        checkbox.checked = processes.some(p => p.id === checkbox.value);
      });

      selectedItems.textContent = processes.map(p => p.name).join(', ');

      submitButton.textContent = 'Update';
      submitButton.setAttribute('data-id', id);
      modal.style.display = 'block';
    });
  });

  document.getElementById('createWorkerForm').addEventListener('submit', (event) => {
    event.preventDefault();

    const formData = new FormData(event.target);
    const id = formData.get('Id');
    console.log(id);
    const selectedProcesses = Array.from(
      processesDropdown.querySelectorAll('input[type="checkbox"]:checked')
    ).map(option => ({
      Id: parseInt(option.value),
      Name: option.nextSibling.textContent.trim()
    }));

    const workerData = {
      Name: formData.get('Name'),
      Surname: formData.get('Surname'),
      Salary: formData.get('Salary'),
      Processes: selectedProcesses
    };

    if (id) {
      workerData.Id = id;
    }


    const url = id ? `/Worker/Update` : '/Worker/Create';
    const method = id ? 'PUT' : 'POST';
    console.log(workerData);



    fetch(url, {
      method: method,
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(workerData),
    })
      .then((response) => {
        console.log(workerData);
        if (response.ok) {
          alert(id ? 'Employee successfully updated!' : 'Employee successfully added!');
          location.reload();
        } else {
          return response.text().then((text) => {
            console.error('Server Error:', text);
            alert('Error occured: ' + text);
          })
        }
      })
      .catch((error) => console.error('Network Error:', error));
  });

</script>

<script>
  document.querySelectorAll('.delete-button').forEach(button => {
    button.addEventListener('click', () => {
        const workerId = button.getAttribute('data-id');
        
        if (confirm('Are you sure you want to delete this worker?')) {
            fetch(`/Worker/Delete/${workerId}`, {
                method: 'DELETE'
            })
            .then(response => response.json())
            .then(data => {
                 console.log(data);
                alert(data.message);
                location.reload();
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error occurred while deleting the worker.');
            });
        }
    });
});
</script>