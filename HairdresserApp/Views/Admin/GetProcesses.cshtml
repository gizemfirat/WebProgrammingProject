@model IEnumerable<Entities.ViewModels.ProcessWithProfessionViewModel>

<div class="section-admin-panel u-margin-bottom-2">
  <button id="openModalButton" class="btn btn-primary u-margin-bottom-2">Add Process</button>
</div>
<table>
  <thead>
    <tr>
      <th>Process</th>
      <th>Profession</th>
      <th>Price</th>
      <th>Time</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    @foreach (var process in Model)
    {
      <tr>
        <td>@process.Name</td>
        <td>@process.ProfessionName</td>
        <td>@process.Price â‚º</td>
        <td>@process.Time minutes</td>
        <td>
          <button class="btn btn-primary edit-button" data-id="@process.Id" data-name="@process.Name"
            data-professionId="@process.ProfessionId" data-professionName="@process.ProfessionName"
            data-price="@process.Price" data-time="@process.Time">Edit</button>
          <button class="btn btn-outlined delete-button" data-id="@process.Id">Delete</button>
        </td>
      </tr>
    }
  </tbody>
</table>

<div id="createProcessModal" class="modal" data-id="">
  <div class="modal-content">
    <div class="modal-header">
      <h5 class="heading-fifth">Add a new Process</h5>
      <span class="close-button" id="closeModalButton">&times;</span>
    </div>
    <form id="createProcessForm">
      <div class="modal-body">
        <div class="form-group">
          <input type="hidden" id="Id" name="Id" />
        </div>
         <div class="form-group">
          <label for="Name" class="form-label">Name</label>
          <input type="text" id="Name" name="Name" class="form-input" required />
        </div>
        <div class="form-group">
          <label for="Price" class="form-label">Price</label>
          <input type="number" id="Price" name="Price" class="form-input" required />
        </div>
        <div class="form-group">
          <label for="Time" class="form-label">Time</label>
          <input type="number" id="Time" name="Time" class="form-input" required />
        </div>
        <div class="form-group">
          <label for="ProfessionId" class="form-label">Profession</label>
          <select id="ProfessionId" name="ProfessionId" class="form-input" required>

          </select>
        </div>
      </div>
      <div class="modal-footer">
        <button type="submit" class="btn btn-primary">Add</button>
      </div>
    </form>
  </div>
</div>

<script>
  const modal = document.getElementById('createProcessModal');
  const openModalButton = document.getElementById('openModalButton');
  const closeModalButton = document.getElementById('closeModalButton');
  const professionDropdown = document.getElementById('ProfessionId');


  document.addEventListener('DOMContentLoaded', () => {
    fetch('/Profession/GetProfessions')
      .then(response => response.json())
      .then(data => {
        data.forEach(profession => {
          const option = document.createElement('option');
          option.value = profession.id;
          option.textContent = profession.name;
          professionDropdown.appendChild(option);
        });
      });
  });

  openModalButton.addEventListener('click', () => {
    modal.style.display = 'block';
  });

  closeModalButton.addEventListener('click', () => {
    modal.style.display = 'none';
  });

  window.addEventListener('click', (event) => {
    if (event.target === modal) {
      modal.style.display = 'none';
    }
  });

  const editButtons = document.querySelectorAll('.edit-button');
  const submitButton = document.querySelector('#createProcessForm button[type="submit"]');

  editButtons.forEach(button => {
    button.addEventListener('click', () => {
      const id = button.getAttribute('data-id');
      const name = button.getAttribute('data-name');
      const price = button.getAttribute('data-price');
      const time = button.getAttribute('data-time');
      const professionId = button.getAttribute('data-professionId');

      document.getElementById('Name').value = name;
      document.getElementById('Price').value = price;
      document.getElementById('Time').value = time;
      document.getElementById('Id').value = id;
      document.getElementById('ProfessionId').value = professionId;

      document.querySelectorAll('#professionId option').forEach(option => {
        option.selected = option.value === professionId;
      });

      submitButton.textContent = 'Update';
      submitButton.setAttribute('data-id', id);
      modal.style.display = 'block';
    });
  });

  document.getElementById('createProcessForm').addEventListener('submit', (event) => {
    event.preventDefault();

    const formData = new FormData(event.target);
    const id = formData.get('Id');
    const selectedProfessionId = formData.get('ProfessionId');

    const processData = {
      Name: formData.get('Name'),
      Price: formData.get('Price'),
      Time: formData.get('Time'),
      ProfessionId: selectedProfessionId 
    };

    if (id) {
      processData.Id = id;
    }

    console.log(processData);


    const url = id ? `/Process/Update` : '/Process/Create';
    const method = id ? 'PUT' : 'POST';

    fetch(url, {
      method: method,
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(processData),
    })
      .then((response) => {
        console.log(processData);
        if (response.ok) {
          alert(id ? 'Process successfully updated!' : 'Process successfully added!');
          location.reload();
        } else {
          return response.text().then((text) => {
            console.error('Server Error:', text);
            alert('Error occured: ' + text);
          })
        }
      })
      .catch((error) => console.error('Network Error:', error));
  });

</script>

<script>
 const deleteButtons = document.querySelectorAll('.delete-button');

  deleteButtons.forEach(button => {
    button.addEventListener('click', () => {
      const id = button.getAttribute('data-id');
      const confirmDelete = confirm("Are you sure you want to delete this process?");
      if(!confirm) return;

      fetch(`/Process/Delete/${id}`, {
        method: 'DELETE',
      })
      .then(response => {
        if(response.ok) {
          alert("Process deleted successfully!");
          location.reload();
        } else {
          return response.text().then((text) => {
            alert(`Error: ${text}`);
          });
        }
      })
      .catch(error => console.error('Error:', error));
    });
  });
</script>