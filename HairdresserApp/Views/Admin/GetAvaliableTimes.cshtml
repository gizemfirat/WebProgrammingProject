@model List<Entities.ViewModels.AvaliableTimeViewModel>

<div class="section-admin-panel u-margin-bottom-2">
  <button id="openModalButton" class="btn btn-primary u-margin-bottom-2">Add Avaliable Time</button>
</div>
<table>
  <thead>
    <tr>
      <th>Start Date</th>
      <th>End Date</th>
      <th>Worker</th>
      <th>Process</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    @foreach (var avaliableTime in Model)
    {
      <tr>
        <td>@avaliableTime.Time</td>
        <td>@avaliableTime.EndTime</td>
        <td>@avaliableTime.WorkerName @avaliableTime.WorkerSurname</td>
        <td>@avaliableTime.ProcessName</td>
        <td>
          <button class="btn btn-primary edit-button" data-id="@avaliableTime.AvaliableTimeId"
            data-workerProcessId="@avaliableTime.WorkerProcessId" 
            data-time="@avaliableTime.Time.ToString("o")"
            data-endTime="@avaliableTime.EndTime.ToString("o")"
            data-isAvaliable="@avaliableTime.IsAvaliable">Edit</button>
          <button class="btn btn-outlined delete-button" data-id="@avaliableTime.AvaliableTimeId">Delete</button>
        </td>
      </tr>
    }
  </tbody>
</table>

<div id="createAvaliableTimeModal" class="modal" data-id="">
  <div class="modal-content">
    <div class="modal-header">
      <h5 class="heading-fifth">Add a new Avaliable Time</h5>
      <span class="close-button" id="closeModalButton">&times;</span>
    </div>
    <form id="createAvaliableTimeForm">
      <div class="modal-body">
        <div class="form-group">
          <input type="hidden" id="Id" name="Id" />
        </div>

        <div class="form-group">
          <label for="Time" class="form-label">Start Time</label>
          <input type="datetime-local" id="Time" name="Time" class="form-input" required />
        </div>

        <div class="form-group">
          <label for="EndTime" class="form-label">End Time</label>
          <input type="datetime-local" id="EndTime" name="EndTime" class="form-input" required />
        </div>
        <div class="form-group">
          <label for="WorkerProcessId" class="form-label">Worker - Process</label>
          <select id="WorkerProcessId" name="WorkerProcessId" class="form-input" required>
          </select>
        </div>
      </div>
      <div class="modal-footer">
        <button type="submit" class="btn btn-primary">Add</button>
      </div>
    </form>
  </div>
</div>

<script>
  const modal = document.getElementById('createAvaliableTimeModal');
  const openModalButton = document.getElementById('openModalButton');
  const closeModalButton = document.getElementById('closeModalButton');
  const workerProcessDropdown = document.getElementById('WorkerProcessId');


  document.addEventListener('DOMContentLoaded', () => {
    fetch('/WorkerProcess/GetWorkerProcesses')
      .then(response => response.json())
      .then(data => {
        data.forEach(workerProcess => {
          const option = document.createElement('option');
          option.value = workerProcess.id;
          option.textContent = workerProcess.name;
          workerProcessDropdown.appendChild(option);
        });
      });
  });

  openModalButton.addEventListener('click', () => {
    modal.style.display = 'block';
  });

  closeModalButton.addEventListener('click', () => {
    modal.style.display = 'none';
  });

  window.addEventListener('click', (event) => {
    if (event.target === modal) {
      modal.style.display = 'none';
    }
  });

  const editButtons = document.querySelectorAll('.edit-button');
  const submitButton = document.querySelector('#createAvaliableTimeForm button[type="submit"]');

  editButtons.forEach(button => {
    button.addEventListener('click', () => {
      const id = button.getAttribute('data-id');
      const time = button.getAttribute('data-time');
      const endTime = button.getAttribute('data-endTime');
      const workerProcessId = button.getAttribute('data-workerProcessId');
      const isAvaliable = button.getAttribute('data-isAvaliable');

      const utcDate = new Date(button.getAttribute('data-time')); 
      const localDate = new Date(utcDate.getTime() - utcDate.getTimezoneOffset() * 60000);
      const utcDate2 = new Date(button.getAttribute('data-endTime')); 
      const localDate2 = new Date(utcDate2.getTime() - utcDate2.getTimezoneOffset() * 60000);


      document.getElementById('Time').value = localDate.toISOString().slice(0, 16);
      document.getElementById('EndTime').value = localDate2.toISOString().slice(0, 16);
      document.getElementById('WorkerProcessId').value = workerProcessId;
      document.getElementById('Id').value = id;

      document.querySelectorAll('#workerProcessId option').forEach(option => {
        option.selected = option.value === workerProcessId;
      });

      submitButton.textContent = 'Update';
      submitButton.setAttribute('data-id', id);
      modal.style.display = 'block';
    });
  });

  document.getElementById('createAvaliableTimeForm').addEventListener('submit', (event) => {
    event.preventDefault();

    const formData = new FormData(event.target);
    const id = formData.get('Id');
    const selectedWorkerProcessId = formData.get('WorkerProcessId');

    const avaliableTimeData = {
      Time: formData.get('Time'),
      EndTime: formData.get('EndTime'),
      IsAvaliable: 1,
      WorkerProcessId: selectedWorkerProcessId
    };

    if (id) {
      avaliableTimeData.Id = id;
    }

    console.log(avaliableTimeData);


    const url = id ? `/AvaliableTime/Update` : '/AvaliableTime/Create';
    const method = id ? 'PUT' : 'POST';

    fetch(url, {
      method: method,
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(avaliableTimeData),
    })
      .then((response) => {
        console.log(avaliableTimeData);
        if (response.ok) {
          alert(id ? 'Avaliable Time successfully updated!' : 'Avaliable Time successfully added!');
          location.reload();
        } else {
          return response.text().then((text) => {
            console.error('Server Error:', text);
            alert('Error occured: ' + text);
          })
        }
      })
      .catch((error) => console.error('Network Error:', error));
  });

</script>

<script>
  const deleteButtons = document.querySelectorAll('.delete-button');

  deleteButtons.forEach(button => {
    button.addEventListener('click', () => {
      const id = button.getAttribute('data-id');
      const confirmDelete = confirm("Are you sure you want to delete this avaliable time?");
      if (!confirm) return;

      fetch(`/AvaliableTime/Delete/${id}`, {
        method: 'DELETE',
      })
        .then(response => {
          if (response.ok) {
            alert("Avaliable Time deleted successfully!");
            location.reload();
          } else {
            return response.text().then((text) => {
              alert(`Error: ${text}`);
            });
          }
        })
        .catch(error => console.error('Error:', error));
    });
  });
</script>