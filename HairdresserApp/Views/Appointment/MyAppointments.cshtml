@model IEnumerable<Entities.ViewModels.AppointmentDetailDto>

<h1>My Appointments</h1>

<table class="table">
    <thead>
        <tr>
            <th>Process Name</th>
            <th>Worker Name</th>
            <th>Date</th>
            <th>Time</th>
            <th>Price</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var appointment in Model)
        {
            <tr>
                <td>@appointment.ProcessName</td>
                <td>@appointment.WorkerFullName</td>
                <td>@appointment.Date.ToString("yyyy-MM-dd HH:mm")</td>
                <td>@appointment.EstablishedTime minutes</td>
                <td>@appointment.Price â‚º</td>
                @if(appointment.IsApproved == 0) {
                <td>Waiting for an approval...</td>
                } else {
                  <td>Approved!</td>
                }
            </tr>
        }
    </tbody>
</table>

<script>
  let deleteAppointmentId;

  function openModal(appointmentId, date, workerName) {
    deleteAppointmentId = appointmentId;
    document.getElementById("modal-appointment-details").textContent = "Date: " + date +  ", " + "Worker: " + workerName;
    document.getElementById("deleteModal").style.display = "block";
  }

  function closeModal() {
    document.getElementById("deleteModal").style.display = "none";
  }

  document.getElementById("confirmDeleteButton").addEventListener("click", async () => {
    if(!deleteAppointmentId) return;

    try {
      const response = await fetch(`/api/appointment/${deleteAppointmentId}`, {method: "DELETE"});
      if(response.ok) {
        alert("Appointment deleted successfully.");
        location.reload();
      } else {
        alert("Failed to delete thead appointment.");
      }
    } catch (error) {
      console.error("Error:", error);
      alert("An error occured!");
    }

    closeModal();
  });
</script>